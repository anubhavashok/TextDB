// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tagger_message.proto

#ifndef PROTOBUF_tagger_5fmessage_2eproto__INCLUDED
#define PROTOBUF_tagger_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tagger_message {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tagger_5fmessage_2eproto();
void protobuf_AssignDesc_tagger_5fmessage_2eproto();
void protobuf_ShutdownFile_tagger_5fmessage_2eproto();

class DocumentFeature;
class TagRequest;
class TagResult;

// ===================================================================

class TagResult : public ::google::protobuf::Message {
 public:
  TagResult();
  virtual ~TagResult();

  TagResult(const TagResult& from);

  inline TagResult& operator=(const TagResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagResult& default_instance();

  void Swap(TagResult* other);

  // implements Message ----------------------------------------------

  inline TagResult* New() const { return New(NULL); }

  TagResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TagResult& from);
  void MergeFrom(const TagResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TagResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string documentName = 1;
  bool has_documentname() const;
  void clear_documentname();
  static const int kDocumentNameFieldNumber = 1;
  const ::std::string& documentname() const;
  void set_documentname(const ::std::string& value);
  void set_documentname(const char* value);
  void set_documentname(const char* value, size_t size);
  ::std::string* mutable_documentname();
  ::std::string* release_documentname();
  void set_allocated_documentname(::std::string* documentname);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // required string type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional uint64 class = 8;
  bool has_class_() const;
  void clear_class_();
  static const int kClassFieldNumber = 8;
  ::google::protobuf::uint64 class_() const;
  void set_class_(::google::protobuf::uint64 value);

  // required uint64 resultID = 3;
  bool has_resultid() const;
  void clear_resultid();
  static const int kResultIDFieldNumber = 3;
  ::google::protobuf::uint64 resultid() const;
  void set_resultid(::google::protobuf::uint64 value);

  // repeated string keys = 6;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 6;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // repeated string values = 7;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 7;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:tagger_message.TagResult)
 private:
  inline void set_has_documentname();
  inline void clear_has_documentname();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_class_();
  inline void clear_has_class_();
  inline void set_has_resultid();
  inline void clear_has_resultid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr documentname_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint64 class__;
  ::google::protobuf::uint64 resultid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  bool success_;
  friend void  protobuf_AddDesc_tagger_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tagger_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tagger_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static TagResult* default_instance_;
};
// -------------------------------------------------------------------

class DocumentFeature : public ::google::protobuf::Message {
 public:
  DocumentFeature();
  virtual ~DocumentFeature();

  DocumentFeature(const DocumentFeature& from);

  inline DocumentFeature& operator=(const DocumentFeature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentFeature& default_instance();

  void Swap(DocumentFeature* other);

  // implements Message ----------------------------------------------

  inline DocumentFeature* New() const { return New(NULL); }

  DocumentFeature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentFeature& from);
  void MergeFrom(const DocumentFeature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DocumentFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:tagger_message.DocumentFeature)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_tagger_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tagger_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tagger_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static DocumentFeature* default_instance_;
};
// -------------------------------------------------------------------

class TagRequest : public ::google::protobuf::Message {
 public:
  TagRequest();
  virtual ~TagRequest();

  TagRequest(const TagRequest& from);

  inline TagRequest& operator=(const TagRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagRequest& default_instance();

  void Swap(TagRequest* other);

  // implements Message ----------------------------------------------

  inline TagRequest* New() const { return New(NULL); }

  TagRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TagRequest& from);
  void MergeFrom(const TagRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TagRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // required string cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // optional string documentName = 2;
  bool has_documentname() const;
  void clear_documentname();
  static const int kDocumentNameFieldNumber = 2;
  const ::std::string& documentname() const;
  void set_documentname(const ::std::string& value);
  void set_documentname(const char* value);
  void set_documentname(const char* value, size_t size);
  ::std::string* mutable_documentname();
  ::std::string* release_documentname();
  void set_allocated_documentname(::std::string* documentname);

  // map<string, .tagger_message.DocumentFeature> documentFeatures = 3;
  int documentfeatures_size() const;
  void clear_documentfeatures();
  static const int kDocumentFeaturesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::tagger_message::DocumentFeature >&
      documentfeatures() const;
  ::google::protobuf::Map< ::std::string, ::tagger_message::DocumentFeature >*
      mutable_documentfeatures();

  // @@protoc_insertion_point(class_scope:tagger_message.TagRequest)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_documentname();
  inline void clear_has_documentname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr documentname_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::tagger_message::DocumentFeature,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      TagRequest_DocumentFeaturesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::tagger_message::DocumentFeature,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > documentfeatures_;
  friend void  protobuf_AddDesc_tagger_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tagger_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tagger_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static TagRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TagResult

// required string documentName = 1;
inline bool TagResult::has_documentname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TagResult::set_has_documentname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TagResult::clear_has_documentname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TagResult::clear_documentname() {
  documentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_documentname();
}
inline const ::std::string& TagResult::documentname() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.documentName)
  return documentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TagResult::set_documentname(const ::std::string& value) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.documentName)
}
inline void TagResult::set_documentname(const char* value) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.TagResult.documentName)
}
inline void TagResult::set_documentname(const char* value, size_t size) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagResult.documentName)
}
inline ::std::string* TagResult::mutable_documentname() {
  set_has_documentname();
  // @@protoc_insertion_point(field_mutable:tagger_message.TagResult.documentName)
  return documentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TagResult::release_documentname() {
  clear_has_documentname();
  return documentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TagResult::set_allocated_documentname(::std::string* documentname) {
  if (documentname != NULL) {
    set_has_documentname();
  } else {
    clear_has_documentname();
  }
  documentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), documentname);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.TagResult.documentName)
}

// required bool success = 2;
inline bool TagResult::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TagResult::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TagResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TagResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TagResult::success() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.success)
  return success_;
}
inline void TagResult::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.success)
}

// required string type = 5;
inline bool TagResult::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TagResult::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TagResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TagResult::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& TagResult::type() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TagResult::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.type)
}
inline void TagResult::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.TagResult.type)
}
inline void TagResult::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagResult.type)
}
inline ::std::string* TagResult::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:tagger_message.TagResult.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TagResult::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TagResult::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.TagResult.type)
}

// optional uint64 class = 8;
inline bool TagResult::has_class_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TagResult::set_has_class_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TagResult::clear_has_class_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TagResult::clear_class_() {
  class__ = GOOGLE_ULONGLONG(0);
  clear_has_class_();
}
inline ::google::protobuf::uint64 TagResult::class_() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.class)
  return class__;
}
inline void TagResult::set_class_(::google::protobuf::uint64 value) {
  set_has_class_();
  class__ = value;
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.class)
}

// required uint64 resultID = 3;
inline bool TagResult::has_resultid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TagResult::set_has_resultid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TagResult::clear_has_resultid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TagResult::clear_resultid() {
  resultid_ = GOOGLE_ULONGLONG(0);
  clear_has_resultid();
}
inline ::google::protobuf::uint64 TagResult::resultid() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.resultID)
  return resultid_;
}
inline void TagResult::set_resultid(::google::protobuf::uint64 value) {
  set_has_resultid();
  resultid_ = value;
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.resultID)
}

// repeated string keys = 6;
inline int TagResult::keys_size() const {
  return keys_.size();
}
inline void TagResult::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& TagResult::keys(int index) const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.keys)
  return keys_.Get(index);
}
inline ::std::string* TagResult::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:tagger_message.TagResult.keys)
  return keys_.Mutable(index);
}
inline void TagResult::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.keys)
  keys_.Mutable(index)->assign(value);
}
inline void TagResult::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tagger_message.TagResult.keys)
}
inline void TagResult::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagResult.keys)
}
inline ::std::string* TagResult::add_keys() {
  return keys_.Add();
}
inline void TagResult::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tagger_message.TagResult.keys)
}
inline void TagResult::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tagger_message.TagResult.keys)
}
inline void TagResult::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tagger_message.TagResult.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TagResult::keys() const {
  // @@protoc_insertion_point(field_list:tagger_message.TagResult.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TagResult::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:tagger_message.TagResult.keys)
  return &keys_;
}

// repeated string values = 7;
inline int TagResult::values_size() const {
  return values_.size();
}
inline void TagResult::clear_values() {
  values_.Clear();
}
inline const ::std::string& TagResult::values(int index) const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.values)
  return values_.Get(index);
}
inline ::std::string* TagResult::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:tagger_message.TagResult.values)
  return values_.Mutable(index);
}
inline void TagResult::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.values)
  values_.Mutable(index)->assign(value);
}
inline void TagResult::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tagger_message.TagResult.values)
}
inline void TagResult::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagResult.values)
}
inline ::std::string* TagResult::add_values() {
  return values_.Add();
}
inline void TagResult::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tagger_message.TagResult.values)
}
inline void TagResult::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tagger_message.TagResult.values)
}
inline void TagResult::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tagger_message.TagResult.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TagResult::values() const {
  // @@protoc_insertion_point(field_list:tagger_message.TagResult.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TagResult::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:tagger_message.TagResult.values)
  return &values_;
}

// -------------------------------------------------------------------

// DocumentFeature

// required string name = 1;
inline bool DocumentFeature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentFeature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentFeature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentFeature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DocumentFeature::name() const {
  // @@protoc_insertion_point(field_get:tagger_message.DocumentFeature.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentFeature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.DocumentFeature.name)
}
inline void DocumentFeature::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.DocumentFeature.name)
}
inline void DocumentFeature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.DocumentFeature.name)
}
inline ::std::string* DocumentFeature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tagger_message.DocumentFeature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentFeature::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentFeature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.DocumentFeature.name)
}

// required string type = 2;
inline bool DocumentFeature::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentFeature::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentFeature::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentFeature::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& DocumentFeature::type() const {
  // @@protoc_insertion_point(field_get:tagger_message.DocumentFeature.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentFeature::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.DocumentFeature.type)
}
inline void DocumentFeature::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.DocumentFeature.type)
}
inline void DocumentFeature::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.DocumentFeature.type)
}
inline ::std::string* DocumentFeature::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:tagger_message.DocumentFeature.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentFeature::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentFeature::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.DocumentFeature.type)
}

// required string value = 3;
inline bool DocumentFeature::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentFeature::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentFeature::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentFeature::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& DocumentFeature::value() const {
  // @@protoc_insertion_point(field_get:tagger_message.DocumentFeature.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentFeature::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.DocumentFeature.value)
}
inline void DocumentFeature::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.DocumentFeature.value)
}
inline void DocumentFeature::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.DocumentFeature.value)
}
inline ::std::string* DocumentFeature::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:tagger_message.DocumentFeature.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentFeature::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentFeature::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.DocumentFeature.value)
}

// -------------------------------------------------------------------

// TagRequest

// required string cmd = 1;
inline bool TagRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TagRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TagRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TagRequest::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
inline const ::std::string& TagRequest::cmd() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagRequest.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TagRequest::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.TagRequest.cmd)
}
inline void TagRequest::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.TagRequest.cmd)
}
inline void TagRequest::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagRequest.cmd)
}
inline ::std::string* TagRequest::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:tagger_message.TagRequest.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TagRequest::release_cmd() {
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TagRequest::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.TagRequest.cmd)
}

// optional string documentName = 2;
inline bool TagRequest::has_documentname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TagRequest::set_has_documentname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TagRequest::clear_has_documentname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TagRequest::clear_documentname() {
  documentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_documentname();
}
inline const ::std::string& TagRequest::documentname() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagRequest.documentName)
  return documentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TagRequest::set_documentname(const ::std::string& value) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.TagRequest.documentName)
}
inline void TagRequest::set_documentname(const char* value) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.TagRequest.documentName)
}
inline void TagRequest::set_documentname(const char* value, size_t size) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagRequest.documentName)
}
inline ::std::string* TagRequest::mutable_documentname() {
  set_has_documentname();
  // @@protoc_insertion_point(field_mutable:tagger_message.TagRequest.documentName)
  return documentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TagRequest::release_documentname() {
  clear_has_documentname();
  return documentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TagRequest::set_allocated_documentname(::std::string* documentname) {
  if (documentname != NULL) {
    set_has_documentname();
  } else {
    clear_has_documentname();
  }
  documentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), documentname);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.TagRequest.documentName)
}

// map<string, .tagger_message.DocumentFeature> documentFeatures = 3;
inline int TagRequest::documentfeatures_size() const {
  return documentfeatures_.size();
}
inline void TagRequest::clear_documentfeatures() {
  documentfeatures_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::tagger_message::DocumentFeature >&
TagRequest::documentfeatures() const {
  // @@protoc_insertion_point(field_map:tagger_message.TagRequest.documentFeatures)
  return documentfeatures_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::tagger_message::DocumentFeature >*
TagRequest::mutable_documentfeatures() {
  // @@protoc_insertion_point(field_mutable_map:tagger_message.TagRequest.documentFeatures)
  return documentfeatures_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tagger_message

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tagger_5fmessage_2eproto__INCLUDED
