// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tagger_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tagger_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tagger_message {

namespace {

const ::google::protobuf::Descriptor* TagResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagRequest_DocumentFeaturesEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tagger_5fmessage_2eproto() {
  protobuf_AddDesc_tagger_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tagger_message.proto");
  GOOGLE_CHECK(file != NULL);
  TagResult_descriptor_ = file->message_type(0);
  static const int TagResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagResult, documentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagResult, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagResult, class__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagResult, resultid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagResult, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagResult, values_),
  };
  TagResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TagResult_descriptor_,
      TagResult::default_instance_,
      TagResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(TagResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagResult, _internal_metadata_),
      -1);
  DocumentFeature_descriptor_ = file->message_type(1);
  static const int DocumentFeature_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFeature, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFeature, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFeature, value_),
  };
  DocumentFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DocumentFeature_descriptor_,
      DocumentFeature::default_instance_,
      DocumentFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(DocumentFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFeature, _internal_metadata_),
      -1);
  TagRequest_descriptor_ = file->message_type(2);
  static const int TagRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagRequest, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagRequest, documentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagRequest, documentfeatures_),
  };
  TagRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TagRequest_descriptor_,
      TagRequest::default_instance_,
      TagRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TagRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagRequest, _internal_metadata_),
      -1);
  TagRequest_DocumentFeaturesEntry_descriptor_ = TagRequest_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tagger_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TagResult_descriptor_, &TagResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DocumentFeature_descriptor_, &DocumentFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TagRequest_descriptor_, &TagRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TagRequest_DocumentFeaturesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tagger_message::DocumentFeature,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TagRequest_DocumentFeaturesEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_tagger_5fmessage_2eproto() {
  delete TagResult::default_instance_;
  delete TagResult_reflection_;
  delete DocumentFeature::default_instance_;
  delete DocumentFeature_reflection_;
  delete TagRequest::default_instance_;
  delete TagRequest_reflection_;
}

void protobuf_AddDesc_tagger_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024tagger_message.proto\022\016tagger_message\"\177"
    "\n\tTagResult\022\024\n\014documentName\030\001 \002(\t\022\017\n\007suc"
    "cess\030\002 \002(\010\022\014\n\004type\030\005 \002(\t\022\r\n\005class\030\010 \001(\004\022"
    "\020\n\010resultID\030\003 \002(\004\022\014\n\004keys\030\006 \003(\t\022\016\n\006value"
    "s\030\007 \003(\t\"<\n\017DocumentFeature\022\014\n\004name\030\001 \002(\t"
    "\022\014\n\004type\030\002 \002(\t\022\r\n\005value\030\003 \002(\t\"\325\001\n\nTagReq"
    "uest\022\013\n\003cmd\030\001 \002(\t\022\024\n\014documentName\030\002 \001(\t\022"
    "J\n\020documentFeatures\030\003 \003(\01320.tagger_messa"
    "ge.TagRequest.DocumentFeaturesEntry\032X\n\025D"
    "ocumentFeaturesEntry\022\013\n\003key\030\001 \001(\t\022.\n\005val"
    "ue\030\002 \001(\0132\037.tagger_message.DocumentFeatur"
    "e:\0028\001", 445);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tagger_message.proto", &protobuf_RegisterTypes);
  TagResult::default_instance_ = new TagResult();
  DocumentFeature::default_instance_ = new DocumentFeature();
  TagRequest::default_instance_ = new TagRequest();
  TagResult::default_instance_->InitAsDefaultInstance();
  DocumentFeature::default_instance_->InitAsDefaultInstance();
  TagRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tagger_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tagger_5fmessage_2eproto {
  StaticDescriptorInitializer_tagger_5fmessage_2eproto() {
    protobuf_AddDesc_tagger_5fmessage_2eproto();
  }
} static_descriptor_initializer_tagger_5fmessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TagResult::kDocumentNameFieldNumber;
const int TagResult::kSuccessFieldNumber;
const int TagResult::kTypeFieldNumber;
const int TagResult::kClassFieldNumber;
const int TagResult::kResultIDFieldNumber;
const int TagResult::kKeysFieldNumber;
const int TagResult::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TagResult::TagResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagger_message.TagResult)
}

void TagResult::InitAsDefaultInstance() {
}

TagResult::TagResult(const TagResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tagger_message.TagResult)
}

void TagResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class__ = GOOGLE_ULONGLONG(0);
  resultid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagResult::~TagResult() {
  // @@protoc_insertion_point(destructor:tagger_message.TagResult)
  SharedDtor();
}

void TagResult::SharedDtor() {
  documentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TagResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagResult_descriptor_;
}

const TagResult& TagResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagger_5fmessage_2eproto();
  return *default_instance_;
}

TagResult* TagResult::default_instance_ = NULL;

TagResult* TagResult::New(::google::protobuf::Arena* arena) const {
  TagResult* n = new TagResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TagResult::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TagResult*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(class__, resultid_);
    if (has_documentname()) {
      documentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    success_ = false;
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  keys_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TagResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagger_message.TagResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string documentName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentname().data(), this->documentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.TagResult.documentName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resultID;
        break;
      }

      // required uint64 resultID = 3;
      case 3: {
        if (tag == 24) {
         parse_resultID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resultid_)));
          set_has_resultid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // required string type = 5;
      case 5: {
        if (tag == 42) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.TagResult.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_keys;
        break;
      }

      // repeated string keys = 6;
      case 6: {
        if (tag == 50) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.TagResult.keys");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_keys;
        if (input->ExpectTag(58)) goto parse_values;
        break;
      }

      // repeated string values = 7;
      case 7: {
        if (tag == 58) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.TagResult.values");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_values;
        if (input->ExpectTag(64)) goto parse_class;
        break;
      }

      // optional uint64 class = 8;
      case 8: {
        if (tag == 64) {
         parse_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &class__)));
          set_has_class_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagger_message.TagResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagger_message.TagResult)
  return false;
#undef DO_
}

void TagResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagger_message.TagResult)
  // required string documentName = 1;
  if (has_documentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentname().data(), this->documentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagResult.documentName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->documentname(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // required uint64 resultID = 3;
  if (has_resultid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->resultid(), output);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagResult.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // repeated string keys = 6;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagResult.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->keys(i), output);
  }

  // repeated string values = 7;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagResult.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->values(i), output);
  }

  // optional uint64 class = 8;
  if (has_class_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->class_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tagger_message.TagResult)
}

::google::protobuf::uint8* TagResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tagger_message.TagResult)
  // required string documentName = 1;
  if (has_documentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentname().data(), this->documentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagResult.documentName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->documentname(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // required uint64 resultID = 3;
  if (has_resultid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->resultid(), target);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagResult.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // repeated string keys = 6;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagResult.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->keys(i), target);
  }

  // repeated string values = 7;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagResult.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->values(i), target);
  }

  // optional uint64 class = 8;
  if (has_class_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->class_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tagger_message.TagResult)
  return target;
}

int TagResult::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_documentname()) {
    // required string documentName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->documentname());
  }

  if (has_success()) {
    // required bool success = 2;
    total_size += 1 + 1;
  }

  if (has_type()) {
    // required string type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_resultid()) {
    // required uint64 resultID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->resultid());
  }

  return total_size;
}
int TagResult::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required string documentName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->documentname());

    // required bool success = 2;
    total_size += 1 + 1;

    // required string type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required uint64 resultID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->resultid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 class = 8;
  if (has_class_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->class_());
  }

  // repeated string keys = 6;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string values = 7;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TagResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TagResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagResult::MergeFrom(const TagResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentname()) {
      set_has_documentname();
      documentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.documentname_);
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_class_()) {
      set_class_(from.class_());
    }
    if (from.has_resultid()) {
      set_resultid(from.resultid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TagResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagResult::CopyFrom(const TagResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void TagResult::Swap(TagResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TagResult::InternalSwap(TagResult* other) {
  documentname_.Swap(&other->documentname_);
  std::swap(success_, other->success_);
  type_.Swap(&other->type_);
  std::swap(class__, other->class__);
  std::swap(resultid_, other->resultid_);
  keys_.UnsafeArenaSwap(&other->keys_);
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TagResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagResult_descriptor_;
  metadata.reflection = TagResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TagResult

// required string documentName = 1;
bool TagResult::has_documentname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TagResult::set_has_documentname() {
  _has_bits_[0] |= 0x00000001u;
}
void TagResult::clear_has_documentname() {
  _has_bits_[0] &= ~0x00000001u;
}
void TagResult::clear_documentname() {
  documentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_documentname();
}
 const ::std::string& TagResult::documentname() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.documentName)
  return documentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagResult::set_documentname(const ::std::string& value) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.documentName)
}
 void TagResult::set_documentname(const char* value) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.TagResult.documentName)
}
 void TagResult::set_documentname(const char* value, size_t size) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagResult.documentName)
}
 ::std::string* TagResult::mutable_documentname() {
  set_has_documentname();
  // @@protoc_insertion_point(field_mutable:tagger_message.TagResult.documentName)
  return documentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TagResult::release_documentname() {
  clear_has_documentname();
  return documentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagResult::set_allocated_documentname(::std::string* documentname) {
  if (documentname != NULL) {
    set_has_documentname();
  } else {
    clear_has_documentname();
  }
  documentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), documentname);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.TagResult.documentName)
}

// required bool success = 2;
bool TagResult::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TagResult::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
void TagResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
void TagResult::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool TagResult::success() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.success)
  return success_;
}
 void TagResult::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.success)
}

// required string type = 5;
bool TagResult::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TagResult::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TagResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TagResult::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& TagResult::type() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagResult::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.type)
}
 void TagResult::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.TagResult.type)
}
 void TagResult::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagResult.type)
}
 ::std::string* TagResult::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:tagger_message.TagResult.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TagResult::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagResult::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.TagResult.type)
}

// optional uint64 class = 8;
bool TagResult::has_class_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TagResult::set_has_class_() {
  _has_bits_[0] |= 0x00000008u;
}
void TagResult::clear_has_class_() {
  _has_bits_[0] &= ~0x00000008u;
}
void TagResult::clear_class_() {
  class__ = GOOGLE_ULONGLONG(0);
  clear_has_class_();
}
 ::google::protobuf::uint64 TagResult::class_() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.class)
  return class__;
}
 void TagResult::set_class_(::google::protobuf::uint64 value) {
  set_has_class_();
  class__ = value;
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.class)
}

// required uint64 resultID = 3;
bool TagResult::has_resultid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TagResult::set_has_resultid() {
  _has_bits_[0] |= 0x00000010u;
}
void TagResult::clear_has_resultid() {
  _has_bits_[0] &= ~0x00000010u;
}
void TagResult::clear_resultid() {
  resultid_ = GOOGLE_ULONGLONG(0);
  clear_has_resultid();
}
 ::google::protobuf::uint64 TagResult::resultid() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.resultID)
  return resultid_;
}
 void TagResult::set_resultid(::google::protobuf::uint64 value) {
  set_has_resultid();
  resultid_ = value;
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.resultID)
}

// repeated string keys = 6;
int TagResult::keys_size() const {
  return keys_.size();
}
void TagResult::clear_keys() {
  keys_.Clear();
}
 const ::std::string& TagResult::keys(int index) const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.keys)
  return keys_.Get(index);
}
 ::std::string* TagResult::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:tagger_message.TagResult.keys)
  return keys_.Mutable(index);
}
 void TagResult::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.keys)
  keys_.Mutable(index)->assign(value);
}
 void TagResult::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tagger_message.TagResult.keys)
}
 void TagResult::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagResult.keys)
}
 ::std::string* TagResult::add_keys() {
  return keys_.Add();
}
 void TagResult::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tagger_message.TagResult.keys)
}
 void TagResult::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tagger_message.TagResult.keys)
}
 void TagResult::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tagger_message.TagResult.keys)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TagResult::keys() const {
  // @@protoc_insertion_point(field_list:tagger_message.TagResult.keys)
  return keys_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TagResult::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:tagger_message.TagResult.keys)
  return &keys_;
}

// repeated string values = 7;
int TagResult::values_size() const {
  return values_.size();
}
void TagResult::clear_values() {
  values_.Clear();
}
 const ::std::string& TagResult::values(int index) const {
  // @@protoc_insertion_point(field_get:tagger_message.TagResult.values)
  return values_.Get(index);
}
 ::std::string* TagResult::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:tagger_message.TagResult.values)
  return values_.Mutable(index);
}
 void TagResult::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tagger_message.TagResult.values)
  values_.Mutable(index)->assign(value);
}
 void TagResult::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tagger_message.TagResult.values)
}
 void TagResult::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagResult.values)
}
 ::std::string* TagResult::add_values() {
  return values_.Add();
}
 void TagResult::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tagger_message.TagResult.values)
}
 void TagResult::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tagger_message.TagResult.values)
}
 void TagResult::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tagger_message.TagResult.values)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TagResult::values() const {
  // @@protoc_insertion_point(field_list:tagger_message.TagResult.values)
  return values_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TagResult::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:tagger_message.TagResult.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentFeature::kNameFieldNumber;
const int DocumentFeature::kTypeFieldNumber;
const int DocumentFeature::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentFeature::DocumentFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagger_message.DocumentFeature)
}

void DocumentFeature::InitAsDefaultInstance() {
}

DocumentFeature::DocumentFeature(const DocumentFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tagger_message.DocumentFeature)
}

void DocumentFeature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentFeature::~DocumentFeature() {
  // @@protoc_insertion_point(destructor:tagger_message.DocumentFeature)
  SharedDtor();
}

void DocumentFeature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DocumentFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentFeature_descriptor_;
}

const DocumentFeature& DocumentFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagger_5fmessage_2eproto();
  return *default_instance_;
}

DocumentFeature* DocumentFeature::default_instance_ = NULL;

DocumentFeature* DocumentFeature::New(::google::protobuf::Arena* arena) const {
  DocumentFeature* n = new DocumentFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentFeature::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DocumentFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagger_message.DocumentFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.DocumentFeature.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.DocumentFeature.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.DocumentFeature.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagger_message.DocumentFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagger_message.DocumentFeature)
  return false;
#undef DO_
}

void DocumentFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagger_message.DocumentFeature)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.DocumentFeature.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.DocumentFeature.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.DocumentFeature.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tagger_message.DocumentFeature)
}

::google::protobuf::uint8* DocumentFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tagger_message.DocumentFeature)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.DocumentFeature.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.DocumentFeature.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.DocumentFeature.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tagger_message.DocumentFeature)
  return target;
}

int DocumentFeature::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_value()) {
    // required string value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int DocumentFeature::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required string value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentFeature::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DocumentFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentFeature>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentFeature::MergeFrom(const DocumentFeature& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DocumentFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentFeature::CopyFrom(const DocumentFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentFeature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DocumentFeature::Swap(DocumentFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentFeature::InternalSwap(DocumentFeature* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentFeature_descriptor_;
  metadata.reflection = DocumentFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentFeature

// required string name = 1;
bool DocumentFeature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentFeature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentFeature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentFeature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DocumentFeature::name() const {
  // @@protoc_insertion_point(field_get:tagger_message.DocumentFeature.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DocumentFeature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.DocumentFeature.name)
}
 void DocumentFeature::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.DocumentFeature.name)
}
 void DocumentFeature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.DocumentFeature.name)
}
 ::std::string* DocumentFeature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tagger_message.DocumentFeature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DocumentFeature::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DocumentFeature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.DocumentFeature.name)
}

// required string type = 2;
bool DocumentFeature::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentFeature::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentFeature::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentFeature::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& DocumentFeature::type() const {
  // @@protoc_insertion_point(field_get:tagger_message.DocumentFeature.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DocumentFeature::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.DocumentFeature.type)
}
 void DocumentFeature::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.DocumentFeature.type)
}
 void DocumentFeature::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.DocumentFeature.type)
}
 ::std::string* DocumentFeature::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:tagger_message.DocumentFeature.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DocumentFeature::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DocumentFeature::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.DocumentFeature.type)
}

// required string value = 3;
bool DocumentFeature::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentFeature::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentFeature::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentFeature::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& DocumentFeature::value() const {
  // @@protoc_insertion_point(field_get:tagger_message.DocumentFeature.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DocumentFeature::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.DocumentFeature.value)
}
 void DocumentFeature::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.DocumentFeature.value)
}
 void DocumentFeature::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.DocumentFeature.value)
}
 ::std::string* DocumentFeature::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:tagger_message.DocumentFeature.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DocumentFeature::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DocumentFeature::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.DocumentFeature.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TagRequest::kCmdFieldNumber;
const int TagRequest::kDocumentNameFieldNumber;
const int TagRequest::kDocumentFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TagRequest::TagRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagger_message.TagRequest)
}

void TagRequest::InitAsDefaultInstance() {
}

TagRequest::TagRequest(const TagRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tagger_message.TagRequest)
}

void TagRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentfeatures_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  documentfeatures_.SetEntryDescriptor(
      &::tagger_message::TagRequest_DocumentFeaturesEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagRequest::~TagRequest() {
  // @@protoc_insertion_point(destructor:tagger_message.TagRequest)
  SharedDtor();
}

void TagRequest::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagRequest_descriptor_;
}

const TagRequest& TagRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagger_5fmessage_2eproto();
  return *default_instance_;
}

TagRequest* TagRequest::default_instance_ = NULL;

TagRequest* TagRequest::New(::google::protobuf::Arena* arena) const {
  TagRequest* n = new TagRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TagRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cmd()) {
      cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_documentname()) {
      documentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  documentfeatures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagger_message.TagRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.TagRequest.cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_documentName;
        break;
      }

      // optional string documentName = 2;
      case 2: {
        if (tag == 18) {
         parse_documentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentname().data(), this->documentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.TagRequest.documentName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_documentFeatures;
        break;
      }

      // map<string, .tagger_message.DocumentFeature> documentFeatures = 3;
      case 3: {
        if (tag == 26) {
         parse_documentFeatures:
          DO_(input->IncrementRecursionDepth());
         parse_loop_documentFeatures:
          ::google::protobuf::scoped_ptr<TagRequest_DocumentFeaturesEntry> entry(documentfeatures_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_documentfeatures())[entry->key()].Swap(entry->mutable_value());
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tagger_message.TagRequest.DocumentFeaturesEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_documentFeatures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagger_message.TagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagger_message.TagRequest)
  return false;
#undef DO_
}

void TagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagger_message.TagRequest)
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagRequest.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  // optional string documentName = 2;
  if (has_documentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentname().data(), this->documentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagRequest.documentName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->documentname(), output);
  }

  // map<string, .tagger_message.DocumentFeature> documentFeatures = 3;
  {
    ::google::protobuf::scoped_ptr<TagRequest_DocumentFeaturesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tagger_message::DocumentFeature >::const_iterator
        it = this->documentfeatures().begin();
        it != this->documentfeatures().end(); ++it) {
      entry.reset(documentfeatures_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          3, *entry, output);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "tagger_message.TagRequest.DocumentFeaturesEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tagger_message.TagRequest)
}

::google::protobuf::uint8* TagRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tagger_message.TagRequest)
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagRequest.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  // optional string documentName = 2;
  if (has_documentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentname().data(), this->documentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tagger_message.TagRequest.documentName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->documentname(), target);
  }

  // map<string, .tagger_message.DocumentFeature> documentFeatures = 3;
  {
    ::google::protobuf::scoped_ptr<TagRequest_DocumentFeaturesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tagger_message::DocumentFeature >::const_iterator
        it = this->documentfeatures().begin();
        it != this->documentfeatures().end(); ++it) {
      entry.reset(documentfeatures_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              3, *entry, target);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "tagger_message.TagRequest.DocumentFeaturesEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tagger_message.TagRequest)
  return target;
}

int TagRequest::ByteSize() const {
  int total_size = 0;

  // required string cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }
  // optional string documentName = 2;
  if (has_documentname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->documentname());
  }

  // map<string, .tagger_message.DocumentFeature> documentFeatures = 3;
  total_size += 1 * this->documentfeatures_size();
  {
    ::google::protobuf::scoped_ptr<TagRequest_DocumentFeaturesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tagger_message::DocumentFeature >::const_iterator
        it = this->documentfeatures().begin();
        it != this->documentfeatures().end(); ++it) {
      entry.reset(documentfeatures_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TagRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TagRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagRequest::MergeFrom(const TagRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  documentfeatures_.MergeFrom(from.documentfeatures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_has_cmd();
      cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
    }
    if (from.has_documentname()) {
      set_has_documentname();
      documentname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.documentname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TagRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagRequest::CopyFrom(const TagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->documentfeatures())) return false;
  return true;
}

void TagRequest::Swap(TagRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TagRequest::InternalSwap(TagRequest* other) {
  cmd_.Swap(&other->cmd_);
  documentname_.Swap(&other->documentname_);
  documentfeatures_.Swap(&other->documentfeatures_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TagRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagRequest_descriptor_;
  metadata.reflection = TagRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TagRequest

// required string cmd = 1;
bool TagRequest::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TagRequest::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void TagRequest::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void TagRequest::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
 const ::std::string& TagRequest::cmd() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagRequest.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagRequest::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.TagRequest.cmd)
}
 void TagRequest::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.TagRequest.cmd)
}
 void TagRequest::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagRequest.cmd)
}
 ::std::string* TagRequest::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:tagger_message.TagRequest.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TagRequest::release_cmd() {
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagRequest::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.TagRequest.cmd)
}

// optional string documentName = 2;
bool TagRequest::has_documentname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TagRequest::set_has_documentname() {
  _has_bits_[0] |= 0x00000002u;
}
void TagRequest::clear_has_documentname() {
  _has_bits_[0] &= ~0x00000002u;
}
void TagRequest::clear_documentname() {
  documentname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_documentname();
}
 const ::std::string& TagRequest::documentname() const {
  // @@protoc_insertion_point(field_get:tagger_message.TagRequest.documentName)
  return documentname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagRequest::set_documentname(const ::std::string& value) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagger_message.TagRequest.documentName)
}
 void TagRequest::set_documentname(const char* value) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagger_message.TagRequest.documentName)
}
 void TagRequest::set_documentname(const char* value, size_t size) {
  set_has_documentname();
  documentname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagger_message.TagRequest.documentName)
}
 ::std::string* TagRequest::mutable_documentname() {
  set_has_documentname();
  // @@protoc_insertion_point(field_mutable:tagger_message.TagRequest.documentName)
  return documentname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TagRequest::release_documentname() {
  clear_has_documentname();
  return documentname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TagRequest::set_allocated_documentname(::std::string* documentname) {
  if (documentname != NULL) {
    set_has_documentname();
  } else {
    clear_has_documentname();
  }
  documentname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), documentname);
  // @@protoc_insertion_point(field_set_allocated:tagger_message.TagRequest.documentName)
}

// map<string, .tagger_message.DocumentFeature> documentFeatures = 3;
int TagRequest::documentfeatures_size() const {
  return documentfeatures_.size();
}
void TagRequest::clear_documentfeatures() {
  documentfeatures_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tagger_message::DocumentFeature >&
TagRequest::documentfeatures() const {
  // @@protoc_insertion_point(field_map:tagger_message.TagRequest.documentFeatures)
  return documentfeatures_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tagger_message::DocumentFeature >*
TagRequest::mutable_documentfeatures() {
  // @@protoc_insertion_point(field_mutable_map:tagger_message.TagRequest.documentFeatures)
  return documentfeatures_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tagger_message

// @@protoc_insertion_point(global_scope)
